name: Set up

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

jobs:

  prepare:
    name: 'Prepare üßÇ'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository branch release
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run the check-changes.sh
        if: ${{ github.event_name == 'pull_request' }}
        run: ./.github/scripts/check-changes.sh
        shell: bash

      - name: Make file executable
        if: ${{ github.event_name == 'pull_request' }}
        run: chmod +x ./.github/scripts/check-merge-changes.sh
        shell: bash

      - name: See changes when merge
        if: ${{ github.event_name == 'push' }}
        run: ./.github/scripts/check-merge-changes.sh
        shell: bash


  #     - name: Get the commit message
  #       id: commit
  #       run: |
  #         echo "COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.sha }})" >> $GITHUB_ENV

  #     - name: Check if there was a tag in the commit
  #       id: tag
  #       run: |
  #         if [[ '${{ env.COMMIT_MESSAGE }}' =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
  #           echo "true"
  #           echo "TAG=true" >> $GITHUB_ENV
  #           echo "TAG_VERSION=$(echo ${{ env.COMMIT_MESSAGE }} | cut -d ' ' -f 2)" >> $GITHUB_ENV
  #         else
  #           echo "false"
  #           echo "TAG=false" >> $GITHUB_ENV
  #         fi

  #     - name: Set ref name
  #       if: ${{ env.TAG == 'true' }}
  #       id: ref-name
  #       # Check if the tag is a semantic version and if in the push event there was a tag
  #       run: |
  #         SEMVER_REGEX="^(v?)(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)"
  #         if [[ ${{ env.TAG}} == 'true' && ${{ env.TAG_VERSION }} =~ $SEMVER_REGEX ]]; then
  #           echo "release"
  #           echo "REF_NAME=release" >> $GITHUB_ENV 
  #         else
  #           echo "not-release"
  #           echo "REF_NAME=not-release" >> $GITHUB_ENV
  #         fi

  #   outputs:
  #     ref-name: ${{ env.REF_NAME }}
  #     version: ${{ env.TAG_VERSION }}

  # # Update version
  # version:
  #   name: 'Update version üì¶'
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.prepare.outputs.ref-name == 'release' }}
  #   steps:
  #     - name: Checkout repository branch release
  #       uses: actions/checkout@v3
  #       with:
  #         ref: release
  #         fetch-depth: 0

  #     - name: Update release branch
  #       run: |
  #         git fetch --all
  #         git pull --all

  #     - name: Git config
  #       run: |
  #         git config --global user.email "github-actions@example.com"
  #         git config --global user.name "github-actions"
      
  #     - name: Use Node.js 16
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Print the tag
  #       run: echo ${{ needs.prepare.outputs.tag }}

  #     - name: Patch the version using TAG and NPM
  #       run: |
  #         npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
  #         echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      
  #     - name: Print package.json
  #       run: cat package.json

  #     - name: Define branch name
  #       run: |
  #         echo "BRANCH_NAME=rel/${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV

  #     - name: Create new branch
  #       run: |
  #         git checkout -b ${{ env.BRANCH_NAME }}

  #     - name: Push to new branch
  #       run: |
  #         git add package.json
  #         git commit -m "Update version"
  #         git push --set-upstream origin ${{ env.BRANCH_NAME }}

  #   outputs:
  #     branch-name: ${{ env.BRANCH_NAME }}
  #     version: ${{ env.VERSION }}

  # create-release:

  #   name: 'Create release üöÄ'
  #   needs: 
  #     - version
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository branch release/$VERSION
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ needs.version.outputs.branch-name }}
  #         fetch-depth: 0

  #     - name: Update release branch
  #       run: |
  #         git fetch --all
  #         git pull --all

  #     - name: Show package.json
  #       run: cat package.json

  #     - name: Git config
  #       run: |
  #         git config --global user.email "github-actions@example.com"
  #         git config --global user.name "github-actions"

  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: v${{ needs.version.outputs.version }}
  #         body: |
  #           ${{ github.workspace }}-CHANGELOG.txt
  #         draft: false
  #         prerelease: false
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         target_commitish: ${{ needs.version.outputs.branch-name }}

  #   outputs:
  #     tag-branch: ${{ needs.version.outputs.branch-name }}
    
  
  # delete-branch:
  #   name: 'Delete branch üóëÔ∏è'
  #   needs: 
  #     - create-release
  #   runs-on: ubuntu-latest

  #   steps:

  #     # DELETE THE VERSION BRANCH THAT WAS USED FOR THE RELEASE
  #     - name: Checkout repository branch release/$VERSION
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ needs.create-release.outputs.tag-branch }}
  #         fetch-depth: 0

  #     - name: Delete branch
  #       run: |
  #         git push origin --delete ${{ needs.create-release.outputs.tag-branch }}
