name: Set up

on:
  push:
    branches:
      - release
    tags:
      - v*

jobs:

  prepare:
    name: 'Prepare üßÇ'
    runs-on: ubuntu-latest

    steps:

      - name: Check if there was a tag in the push event
        id: tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            echo "tag"
            echo "TAG=true" >> $GITHUB_ENV
            echo "TAG_VERSION=$(echo $GITHUB_REF | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          else
            echo "not-tag"
            echo "TAG=false" >> $GITHUB_ENV
          fi

      - name: Set ref name
        if: ${{ env.TAG == 'true' }}
        id: ref-name
        # Check if the tag is a semantic version and if in the push event there was a tag
        run: |
          SEMVER_REGEX="^(v?)(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)"
          if [[ ${{ env.TAG}} == 'true' && ${{ env.TAG_VERSION }} =~ $SEMVER_REGEX ]]; then
            echo "release"
            echo "REF_NAME=release" >> $GITHUB_ENV 
          else
            echo "not-release"
            echo "REF_NAME=not-release" >> $GITHUB_ENV
          fi

    outputs:
      ref-name: ${{ env.REF_NAME }}
      version: ${{ env.TAG_VERSION }}

  # Update version
  version:
    name: 'Update version üì¶'
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.ref-name == 'release' }}
    steps:
      - name: Checkout repository branch release
        uses: actions/checkout@v3
        with:
          ref: release
          fetch-depth: 0

      - name: Update release branch
        run: |
          git fetch --all
          git pull --all

      - name: Git config
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "github-actions"
      
      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Print the tag
        run: echo $TAG

      - name: Patch the version using TAG and NPM
        run: |
          npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      
      - name: Print package.json
        run: cat package.json

      - name: Print the version
        run: echo $VERSION
      
      - name: Push version
        run: |
          git add package.json
          git commit -m "Update version"
      
      - name: Create new branch with $VERSION
        run: |
          git checkout -b $VERSION
          git push --set-upstream origin $VERSION
          echo "BRANCH_NAME=$VERSION" >> $GITHUB_ENV

    outputs:
      branch-name: ${{ env.BRANCH_NAME }}
      version: ${{ env.VERSION }}

  create-release:

    name: 'Create release üöÄ'
    needs: 
      - version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository branch release/$VERSION
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.version.outputs.branch-name }}
          fetch-depth: 0

      - name: Update release branch
        run: |
          git fetch --all
          git pull --all

      - name: Show package.json
        run: cat package.json

      - name: Git config
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "github-actions"

      - name: Create release and tag with the latest version in the source code assets
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.version }}
          release_name: Release ${{ needs.version.outputs.version }}
          target_commitish: ${{ needs.version.outputs.branch-name }}
          body: |
            $(git log --pretty=format:"%h - %an, %ar : %s")
          draft: false
          prerelease: false
  
  delete-branch:
    name: 'Delete branch üóëÔ∏è'
    needs: 
      - prepare
      - version
      - create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository branch tag
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.prepare.outputs.version }}
          fetch-depth: 0

      - name: Update release branch
        run: |
          git fetch --all
          git pull --all

      - name: Git config
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "github-actions"
      
      - name: Delete branch
        run: |
          git checkout release
          git branch -D release/${{ needs.prepare.outputs.version }}
          git push origin --delete release/${{ needs.prepare.outputs.version }}
